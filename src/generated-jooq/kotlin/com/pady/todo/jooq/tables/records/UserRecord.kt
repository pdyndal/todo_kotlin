/*
 * This file is generated by jOOQ.
 */
package com.pady.todo.jooq.tables.records


import com.pady.todo.jooq.tables.User

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRecord() : UpdatableRecordImpl<UserRecord>(User.USER), Record3<ByteArray?, String?, String?> {

    var uId: ByteArray?
        set(value): Unit = set(0, value)
        get(): ByteArray? = get(0) as ByteArray?

    var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var surname: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<ByteArray?> = super.key() as Record1<ByteArray?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<ByteArray?, String?, String?> = super.fieldsRow() as Row3<ByteArray?, String?, String?>
    override fun valuesRow(): Row3<ByteArray?, String?, String?> = super.valuesRow() as Row3<ByteArray?, String?, String?>
    override fun field1(): Field<ByteArray?> = User.USER.U_ID
    override fun field2(): Field<String?> = User.USER.NAME
    override fun field3(): Field<String?> = User.USER.SURNAME
    override fun component1(): ByteArray? = uId
    override fun component2(): String? = name
    override fun component3(): String? = surname
    override fun value1(): ByteArray? = uId
    override fun value2(): String? = name
    override fun value3(): String? = surname

    override fun value1(value: ByteArray?): UserRecord {
        this.uId = value
        return this
    }

    override fun value2(value: String?): UserRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): UserRecord {
        this.surname = value
        return this
    }

    override fun values(value1: ByteArray?, value2: String?, value3: String?): UserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(uId: ByteArray? = null, name: String? = null, surname: String? = null): this() {
        this.uId = uId
        this.name = name
        this.surname = surname
    }
}
