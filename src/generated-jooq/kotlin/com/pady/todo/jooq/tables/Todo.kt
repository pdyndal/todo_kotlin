/*
 * This file is generated by jOOQ.
 */
package com.pady.todo.jooq.tables


import com.pady.todo.jooq.DefaultSchema
import com.pady.todo.jooq.keys.TODO_T_ID_PK
import com.pady.todo.jooq.keys.TODO_U_ID_FK
import com.pady.todo.jooq.tables.records.TodoRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Todo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TodoRecord>?,
    aliased: Table<TodoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TodoRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>TODO</code>
         */
        val TODO: Todo = Todo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TodoRecord> = TodoRecord::class.java

    /**
     * The column <code>TODO.T_ID</code>.
     */
    val T_ID: TableField<TodoRecord, ByteArray?> = createField(DSL.name("T_ID"), SQLDataType.VARBINARY.nullable(false).identity(true), this, "")

    /**
     * The column <code>TODO.U_ID</code>.
     */
    val U_ID: TableField<TodoRecord, ByteArray?> = createField(DSL.name("U_ID"), SQLDataType.VARBINARY.nullable(false), this, "")

    /**
     * The column <code>TODO.TITLE</code>.
     */
    val TITLE: TableField<TodoRecord, String?> = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(2147483647).nullable(false), this, "")

    /**
     * The column <code>TODO.CONTENT</code>.
     */
    val CONTENT: TableField<TodoRecord, String?> = createField(DSL.name("CONTENT"), SQLDataType.VARCHAR(2147483647), this, "")

    private constructor(alias: Name, aliased: Table<TodoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TodoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>TODO</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>TODO</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>TODO</code> table reference
     */
    constructor(): this(DSL.name("TODO"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TodoRecord>): this(Internal.createPathAlias(child, key), child, key, TODO, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TodoRecord, ByteArray?> = super.getIdentity() as Identity<TodoRecord, ByteArray?>
    override fun getPrimaryKey(): UniqueKey<TodoRecord> = TODO_T_ID_PK
    override fun getReferences(): List<ForeignKey<TodoRecord, *>> = listOf(TODO_U_ID_FK)

    private lateinit var _user: User
    fun user(): User {
        if (!this::_user.isInitialized)
            _user = User(this, TODO_U_ID_FK)

        return _user;
    }
    override fun `as`(alias: String): Todo = Todo(DSL.name(alias), this)
    override fun `as`(alias: Name): Todo = Todo(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Todo = Todo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Todo = Todo(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<ByteArray?, ByteArray?, String?, String?> = super.fieldsRow() as Row4<ByteArray?, ByteArray?, String?, String?>
}
